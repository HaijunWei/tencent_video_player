// Autogenerated from Pigeon (v1.0.8), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "messages.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ? error.code : [NSNull null]),
        @"message": (error.message ? error.message : [NSNull null]),
        @"details": (error.details ? error.details : [NSNull null]),
        };
  }
  return @{
      @"result": (result ? result : [NSNull null]),
      @"error": errorDict,
      };
}

@interface HJTextureMessage ()
+ (HJTextureMessage *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface HJCreateMessage ()
+ (HJCreateMessage *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface HJPlayMessage ()
+ (HJPlayMessage *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface HJLoopingMessage ()
+ (HJLoopingMessage *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface HJVolumeMessage ()
+ (HJVolumeMessage *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface HJPlaybackSpeedMessage ()
+ (HJPlaybackSpeedMessage *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface HJPositionMessage ()
+ (HJPositionMessage *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface HJSnapshotMessage ()
+ (HJSnapshotMessage *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end

@implementation HJTextureMessage
+ (HJTextureMessage *)fromMap:(NSDictionary *)dict {
  HJTextureMessage *result = [[HJTextureMessage alloc] init];
  result.textureId = dict[@"textureId"];
  if ((NSNull *)result.textureId == [NSNull null]) {
    result.textureId = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.textureId ? self.textureId : [NSNull null]), @"textureId", nil];
}
@end

@implementation HJCreateMessage
+ (HJCreateMessage *)fromMap:(NSDictionary *)dict {
  HJCreateMessage *result = [[HJCreateMessage alloc] init];
  result.type = [dict[@"type"] integerValue];
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:@(self.type), @"type", nil];
}
@end

@implementation HJPlayMessage
+ (HJPlayMessage *)fromMap:(NSDictionary *)dict {
  HJPlayMessage *result = [[HJPlayMessage alloc] init];
  result.textureId = dict[@"textureId"];
  if ((NSNull *)result.textureId == [NSNull null]) {
    result.textureId = nil;
  }
  result.liveType = [dict[@"liveType"] integerValue];
  result.uri = dict[@"uri"];
  if ((NSNull *)result.uri == [NSNull null]) {
    result.uri = nil;
  }
  result.asset = dict[@"asset"];
  if ((NSNull *)result.asset == [NSNull null]) {
    result.asset = nil;
  }
  result.packageName = dict[@"packageName"];
  if ((NSNull *)result.packageName == [NSNull null]) {
    result.packageName = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.textureId ? self.textureId : [NSNull null]), @"textureId", @(self.liveType), @"liveType", (self.uri ? self.uri : [NSNull null]), @"uri", (self.asset ? self.asset : [NSNull null]), @"asset", (self.packageName ? self.packageName : [NSNull null]), @"packageName", nil];
}
@end

@implementation HJLoopingMessage
+ (HJLoopingMessage *)fromMap:(NSDictionary *)dict {
  HJLoopingMessage *result = [[HJLoopingMessage alloc] init];
  result.textureId = dict[@"textureId"];
  if ((NSNull *)result.textureId == [NSNull null]) {
    result.textureId = nil;
  }
  result.isLooping = dict[@"isLooping"];
  if ((NSNull *)result.isLooping == [NSNull null]) {
    result.isLooping = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.textureId ? self.textureId : [NSNull null]), @"textureId", (self.isLooping ? self.isLooping : [NSNull null]), @"isLooping", nil];
}
@end

@implementation HJVolumeMessage
+ (HJVolumeMessage *)fromMap:(NSDictionary *)dict {
  HJVolumeMessage *result = [[HJVolumeMessage alloc] init];
  result.textureId = dict[@"textureId"];
  if ((NSNull *)result.textureId == [NSNull null]) {
    result.textureId = nil;
  }
  result.volume = dict[@"volume"];
  if ((NSNull *)result.volume == [NSNull null]) {
    result.volume = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.textureId ? self.textureId : [NSNull null]), @"textureId", (self.volume ? self.volume : [NSNull null]), @"volume", nil];
}
@end

@implementation HJPlaybackSpeedMessage
+ (HJPlaybackSpeedMessage *)fromMap:(NSDictionary *)dict {
  HJPlaybackSpeedMessage *result = [[HJPlaybackSpeedMessage alloc] init];
  result.textureId = dict[@"textureId"];
  if ((NSNull *)result.textureId == [NSNull null]) {
    result.textureId = nil;
  }
  result.speed = dict[@"speed"];
  if ((NSNull *)result.speed == [NSNull null]) {
    result.speed = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.textureId ? self.textureId : [NSNull null]), @"textureId", (self.speed ? self.speed : [NSNull null]), @"speed", nil];
}
@end

@implementation HJPositionMessage
+ (HJPositionMessage *)fromMap:(NSDictionary *)dict {
  HJPositionMessage *result = [[HJPositionMessage alloc] init];
  result.textureId = dict[@"textureId"];
  if ((NSNull *)result.textureId == [NSNull null]) {
    result.textureId = nil;
  }
  result.position = dict[@"position"];
  if ((NSNull *)result.position == [NSNull null]) {
    result.position = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.textureId ? self.textureId : [NSNull null]), @"textureId", (self.position ? self.position : [NSNull null]), @"position", nil];
}
@end

@implementation HJSnapshotMessage
+ (HJSnapshotMessage *)fromMap:(NSDictionary *)dict {
  HJSnapshotMessage *result = [[HJSnapshotMessage alloc] init];
  result.path = dict[@"path"];
  if ((NSNull *)result.path == [NSNull null]) {
    result.path = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.path ? self.path : [NSNull null]), @"path", nil];
}
@end

@interface HJTencentVideoPlayerApiCodecReader : FlutterStandardReader
@end
@implementation HJTencentVideoPlayerApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [HJCreateMessage fromMap:[self readValue]];
    
    case 129:     
      return [HJLoopingMessage fromMap:[self readValue]];
    
    case 130:     
      return [HJPlayMessage fromMap:[self readValue]];
    
    case 131:     
      return [HJPlaybackSpeedMessage fromMap:[self readValue]];
    
    case 132:     
      return [HJPositionMessage fromMap:[self readValue]];
    
    case 133:     
      return [HJSnapshotMessage fromMap:[self readValue]];
    
    case 134:     
      return [HJTextureMessage fromMap:[self readValue]];
    
    case 135:     
      return [HJVolumeMessage fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface HJTencentVideoPlayerApiCodecWriter : FlutterStandardWriter
@end
@implementation HJTencentVideoPlayerApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[HJCreateMessage class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[HJLoopingMessage class]]) {
    [self writeByte:129];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[HJPlayMessage class]]) {
    [self writeByte:130];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[HJPlaybackSpeedMessage class]]) {
    [self writeByte:131];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[HJPositionMessage class]]) {
    [self writeByte:132];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[HJSnapshotMessage class]]) {
    [self writeByte:133];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[HJTextureMessage class]]) {
    [self writeByte:134];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[HJVolumeMessage class]]) {
    [self writeByte:135];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface HJTencentVideoPlayerApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation HJTencentVideoPlayerApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[HJTencentVideoPlayerApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[HJTencentVideoPlayerApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *HJTencentVideoPlayerApiGetCodec() {
  static dispatch_once_t s_pred = 0;
  static FlutterStandardMessageCodec *s_sharedObject = nil;
  dispatch_once(&s_pred, ^{
    HJTencentVideoPlayerApiCodecReaderWriter *readerWriter = [[HJTencentVideoPlayerApiCodecReaderWriter alloc] init];
    s_sharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return s_sharedObject;
}


void HJTencentVideoPlayerApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<HJTencentVideoPlayerApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.TencentVideoPlayerApi.create"
        binaryMessenger:binaryMessenger
        codec:HJTencentVideoPlayerApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(createMsg:error:)], @"HJTencentVideoPlayerApi api (%@) doesn't respond to @selector(createMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        HJCreateMessage *arg_msg = args[0];
        FlutterError *error;
        HJTextureMessage *output = [api createMsg:arg_msg error:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.TencentVideoPlayerApi.play"
        binaryMessenger:binaryMessenger
        codec:HJTencentVideoPlayerApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(playMsg:error:)], @"HJTencentVideoPlayerApi api (%@) doesn't respond to @selector(playMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        HJPlayMessage *arg_msg = args[0];
        FlutterError *error;
        [api playMsg:arg_msg error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.TencentVideoPlayerApi.resume"
        binaryMessenger:binaryMessenger
        codec:HJTencentVideoPlayerApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(resumeMsg:error:)], @"HJTencentVideoPlayerApi api (%@) doesn't respond to @selector(resumeMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        HJTextureMessage *arg_msg = args[0];
        FlutterError *error;
        [api resumeMsg:arg_msg error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.TencentVideoPlayerApi.pause"
        binaryMessenger:binaryMessenger
        codec:HJTencentVideoPlayerApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(pauseMsg:error:)], @"HJTencentVideoPlayerApi api (%@) doesn't respond to @selector(pauseMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        HJTextureMessage *arg_msg = args[0];
        FlutterError *error;
        [api pauseMsg:arg_msg error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.TencentVideoPlayerApi.stop"
        binaryMessenger:binaryMessenger
        codec:HJTencentVideoPlayerApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(stopMsg:error:)], @"HJTencentVideoPlayerApi api (%@) doesn't respond to @selector(stopMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        HJTextureMessage *arg_msg = args[0];
        FlutterError *error;
        [api stopMsg:arg_msg error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.TencentVideoPlayerApi.seekTo"
        binaryMessenger:binaryMessenger
        codec:HJTencentVideoPlayerApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(seekToMsg:error:)], @"HJTencentVideoPlayerApi api (%@) doesn't respond to @selector(seekToMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        HJPositionMessage *arg_msg = args[0];
        FlutterError *error;
        [api seekToMsg:arg_msg error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.TencentVideoPlayerApi.setLooping"
        binaryMessenger:binaryMessenger
        codec:HJTencentVideoPlayerApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setLoopingMsg:error:)], @"HJTencentVideoPlayerApi api (%@) doesn't respond to @selector(setLoopingMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        HJLoopingMessage *arg_msg = args[0];
        FlutterError *error;
        [api setLoopingMsg:arg_msg error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.TencentVideoPlayerApi.setVolume"
        binaryMessenger:binaryMessenger
        codec:HJTencentVideoPlayerApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setVolumeMsg:error:)], @"HJTencentVideoPlayerApi api (%@) doesn't respond to @selector(setVolumeMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        HJVolumeMessage *arg_msg = args[0];
        FlutterError *error;
        [api setVolumeMsg:arg_msg error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.TencentVideoPlayerApi.setPlaybackSpeed"
        binaryMessenger:binaryMessenger
        codec:HJTencentVideoPlayerApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setPlaybackSpeedMsg:error:)], @"HJTencentVideoPlayerApi api (%@) doesn't respond to @selector(setPlaybackSpeedMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        HJPlaybackSpeedMessage *arg_msg = args[0];
        FlutterError *error;
        [api setPlaybackSpeedMsg:arg_msg error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.TencentVideoPlayerApi.snapshot"
        binaryMessenger:binaryMessenger
        codec:HJTencentVideoPlayerApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(snapshotMsg:completion:)], @"HJTencentVideoPlayerApi api (%@) doesn't respond to @selector(snapshotMsg:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        HJTextureMessage *arg_msg = args[0];
        [api snapshotMsg:arg_msg completion:^(HJSnapshotMessage *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.TencentVideoPlayerApi.dispose"
        binaryMessenger:binaryMessenger
        codec:HJTencentVideoPlayerApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(disposeMsg:error:)], @"HJTencentVideoPlayerApi api (%@) doesn't respond to @selector(disposeMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        HJTextureMessage *arg_msg = args[0];
        FlutterError *error;
        [api disposeMsg:arg_msg error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
